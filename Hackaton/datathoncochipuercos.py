# -*- coding: utf-8 -*-
"""DatathonCochipuercos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dPB1g7MsCjtCvhBu_WZ6Zfq5FytxFlR9
"""

import pandas as pd 

df = pd.read_excel('archfiltNew.xlsx') # Carga el archivo de Excel 'archfiltNew.xlsx' en un DataFrame llamado 'df'

df.head() # Despliega las primeras filas del Dataframe

df = df.iloc[:,1:4] # Selecciona todas las filas y las columnas de la columna 1 a 3 del Dataframe "df"

df.info() # Proporciona un resumen concreto del Dataframe "df" que son las entradas, las columnas, sus tipos de datos
#y la cantidad de valores no nulos

df.describe() # Genera estadisticas descriptivas que sintetizan la tendencia central, la dispersión y la forma de distribución de los
# datos, excluyendo los valores NaN

df.isnull().sum() # Suma de valores nulos en cada columna del dataframe "df"

df= df.dropna() # Elimina todas las filas que tengan al menos un valor nulo

df.isnull().values.any() 

df.columns # Regresa las columnas presentes en el dataframe "df"

x = df[['Polarity', 'Subjectivity']].values # variables independientes
y = df['Cost Estimate'].values # variable dependiente

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0) # Conjuntos de entrenamiento y prueba

y_test # Imprime los valores de la variable dependiente ('Cost Estimate')

from sklearn.linear_model import LinearRegression
model_regression = LinearRegression()

model_regression.fit(x_train, y_train) # aprendizaje automático con base en nuestros datos

x_labels = ['Polarity', 'Subjectivity']
c_label = ['Cost Estimate']

coeff_df = pd.DataFrame(model_regression.coef_, x_labels, c_label)
coeff_df

y_pred = model_regression.predict(x_test) # realiza la predicción con el modelo generado

residuals = pd.DataFrame({'Inversión': y_test, 'Predicción': y_pred, 'Residual': y_test - y_pred})
residuals = residuals.sample(n = 30)
residuals = residuals.sort_values(by='Inversión')
residuals

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt # importamos la librería pyplot que nos permitirá graficar
import numpy as np # importamos la librería numpy que nos permitirá crear un arreglo para la muestra de 30 datos

# función mágica para desplegar el gráfico en nuestra libreta
# %matplotlib inline

plt.scatter(np.arange(30), residuals['Inversión'], label = "Inversión")  # creamos el gráfico con la muestra de datos reales
plt.scatter(np.arange(30), residuals['Predicción'], label = "Predicción")  # creamos el gráfico con la muestra de datos de predicción

plt.title("Comparación de costos hechos: Inversión y Predicción") # indicamos el título del gráfico

plt.xlabel("30 observaciones de costos hechos") # indicamos la etiqueta del eje de las x

plt.ylabel("Costos Hechos") # indicamos la etiqueta del eje de las y

plt.legend(loc='upper left') # indicamos la posición de la etiqueta de los datos

plt.show() # desplegamos el gráfico